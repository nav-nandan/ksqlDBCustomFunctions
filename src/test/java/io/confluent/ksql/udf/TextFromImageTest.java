package io.confluent.ksql.udf;

import org.junit.Test;

import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;

import static org.junit.Assert.*;

public class TextFromImageTest {

    @Test
    public void testAmazonRekognition() {
        try {
            String url = "https://rekognition.ap-southeast-1.amazonaws.com";
            String image = "";
            String auth = "AWS4-HMAC-SHA256 Credential=ASIA4CEZVBNW6VTS5M44/20221027/ap-southeast-1/rekognition/aws4_request, SignedHeaders=host;x-amz-content-sha256;x-amz-date;x-amz-security-token;x-amz-target;x-amz-user-agent;x-rekognition-consumer, Signature=9febe1c7d77dcaac24f6ddc55cda4af472e3b2c3d52a0fc23c6ca03cc895c31a";
            String timestamp = "20221027T055133Z";
            String service = "RekognitionService.DetectText";
            String token = "IQoJb3JpZ2luX2VjECYaDmFwLXNvdXRoZWFzdC0xIkcwRQIhAMCNJaANhen2oKXLZpNtMHwUvKS2NL85qyeicYczn7JOAiAyWTLL+VfB7ZNQgDcSp66Epi4Uo3XFE2ESbosXF4oeZiqrAwj///////////8BEAMaDDgyOTI1MDkzMTU2NSIMgwNNIcRtQzPpvVBMKv8Ckmn+mCYGdrYKSC1RNbhI3pGP2zPauOlo1yMY2SYNTas40dQqHeNgAOdICBGG/NOToEhQBgZe3wHSIIr49Kkq34pGkA3DubKp4MaLnpBryHSglbSkx4D+HeL+7/I19n/CssIimkDjn5t+GQ04bf+pfUZ2trz31peUxLJ12enPaW2xSnq1gbbl1jQIqjVCDgiTVwFMjBdNnbk98Tph7G5vWqoKreX4Uu6quicbUIRoxShrGjc37EqjSMvMKYKyZoTqE0Ed41cM2Gn9oLK+0tOQeB/WRlsLsCMS93ytFqnPFr/fwLsHbNi8ZEVEXASVXr9IOijgBap8jKTQeoeLJXx3x9YMA4EvrSCqaO8hTAZdxAc1H75Xiv3PMBTuqziTfIBIkBT9a939kJoS/QTU1TBMcsIgqrgAXGMLDf/IIK93pv7VqkXtfLSf6r/jKZvF7bTkyVyipcEjfNBQvblPkeq1EIBgvTyae9Rfs44O/XJdca3eAkLMUZ1ThVbAZfS0k74wwtrnmgY67QGh2I6AbE82b+ogMvxFaZkdXcDHsb3sAHEbiGT3qQR3T9vx+tVv2JNLoaPW1W4PVOX5CtAhxOtLcVDJLnjzfEToXbo2mWfZZ+7QKKhOQlgRWbkAr5al0zKvBE36u/PeVKMOCRwo8Hp3I9FN/KLCN2Fc2VC0S0EKW4r3o/dKd8xUHMFDIEDgAl/jALq1w9Ed2Xz3GfsfyrnOEkmw0jWoK/y3yiZFPcuciQ4KYc1ekNh/HNj+LUnwqc0/0fzEM+3RSRtz7qtwKPJnEKaN/B6o2LkoJOit9n3Fz+wZQP3ve8MMj/e3ZHR5LX8YDBMXgRw=";
            HttpClient client = HttpClient.newHttpClient();
            HttpResponse<String> response = null;
            String body = "{\"Image\":{\"Bytes\":\"" + image + "\"}}";

            HttpRequest request = HttpRequest.newBuilder().uri(URI.create(url))
                    .POST(HttpRequest.BodyPublishers.ofString(body))
                    .header("Authorization", auth)
                    .header("Content-Type", "application/x-amz-json-1.1")
                    .headers("X-Amz-Content-Sha256", "28291d9050db6a58df7d1d99d7b326c54adaca721a6ecaebf789ee373c7b922f")
                    .headers("X-Amz-Date", timestamp)
                    .headers("X-Amz-Target", service)
                    .headers("X-Amz-User-Agent", "aws-sdk-js/2.1111.0 promise")
                    .headers("X-Rekognition-Consumer", "console")
                    .headers("x-amz-security-token", token)
                    .build();
            response = client.send(request, HttpResponse.BodyHandlers.ofString());
            System.out.println(response.body());
            assertNotNull(response.toString());
        } catch (Exception e) {
            System.out.println(e);
            e.printStackTrace();
        }
    }
}
